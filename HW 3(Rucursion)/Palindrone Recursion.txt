function isPalindrome(str) {
  if (str.length <= 1) {
    return true;
  }

  let i = 0;
  let j = str.length - 1;

  while (i < j) {
    if (str[i] !== str[j]) {
      return false;
    }
    i++;
    j--;
  }

  return true;
}
Здесь мы сначала проверяем базовый случай, когда длина строки меньше или равна 1, 
и сразу возвращаем true. Затем мы инициализируем два указателя i и j, 
указывающие на первый и последний символы строки соответственно. 
Далее мы запускаем цикл, который будет продолжаться до тех пор, пока i меньше j. 
В цикле мы сравниваем символы в позициях i и j, и если они не равны, возвращаем false, 
так как строка не является палиндромом. Если символы равны, мы продвигаем указатели i и j к центру строки. 
Если цикл завершается, то строка является палиндромом, и мы возвращаем true.

function isPalindrome(str) {
  if (str.length <= 1) {
    return true;
  }
  if (str[0] === str[str.length - 1]) {
    return isPalindrome(str.slice(1, str.length - 1));
  } else {
    return false;
  }
}
Эта функция принимает строку str в качестве параметра и использует рекурсивный подход 
для проверки того, является ли строка палиндромом. Если длина строки меньше или равна 1, 
функция возвращает true, поскольку строка из одного символа является палиндромом.
Если первый и последний символы строки совпадают, функция рекурсивно вызывает себя для подстроки, 
которая исключает первый и последний символы, используя метод slice(). 
Если первый и последний символы не совпадают, функция возвращает false.
Этот процесс повторяется рекурсивно до тех пор, пока длина строки не станет меньше или равной 1. 
Если вся строка является палиндромом, функция возвращает true. 
Если же встречается непарный символ, то функция вернет false
