// 2.1 Напишите рекурсивный метод, который выводит на экран числа Фибоначчи до N-ого элемента.
function fibonacci(n) {
    if (n <= 1) {
      return n;
    } else {
      return fibonacci(n - 1) + fibonacci(n - 2);
    }
  }


// но с большими числа все будет очень долго работать О(е^n)
// нашел правильный спсобо но сам немного не понял его, но суть понятна (use memoization)
function fibonacci(n, memo = {}) {
    if (n in memo) {
      return memo[n];
    }
    if (n <= 1) {
      return n;
    }
    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);
    return memo[n];
}
Данная функция fibonacci(n, memo = {}) вычисляет n-ное число Фибоначчи с помощью рекурсии и мемоизации 
(запоминания уже вычисленных значений).
Когда функция вызывается с числом n, она сначала проверяет, 
есть ли уже вычисленное значение n в объекте memo. 
Если есть, то она возвращает это значение без дополнительных вычислений, 
чтобы избежать повторных рассчетов.
Если n не найден в memo, то функция проверяет, является ли n меньше или равным 1. 
Если это так, то функция возвращает n, потому что n-е число Фибоначчи в этом случае 
равно n (например, fibonacci(0) и fibonacci(1) возвращают соответственно 0 и 1).
Если n больше 1, то функция вызывает себя рекурсивно для n-1 и n-2, 
передавая им объект memo для мемоизации. Результаты рекурсивных вызовов складываются и 
записываются в memo для использования в будущем. В конце функция возвращает memo[n].
Таким образом, мемоизация позволяет значительно ускорить вычисление чисел Фибоначчи, так как каждое число вычисляется только один раз.